variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.TestProjects
  value: '**/*[Tt]ests/*.csproj'
trigger:
  branches:
    include:
    - refs/heads/master
name: $(date:yyyyMMdd)$(rev:.r)
jobs:
- job: Job_1
  displayName: Agent job 1
  pool:
    name: RAgent
  steps:
  - checkout: self
    fetchDepth: 1
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      ConnectedServiceName: 8787bb63-a800-4285-86c2-5ad39aec78f8
      command: restore
      projects: $(BuildParameters.RestoreBuildProjects)
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      ConnectedServiceName: 8787bb63-a800-4285-86c2-5ad39aec78f8
      projects: $(BuildParameters.RestoreBuildProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: DotNetCoreCLI@2
    displayName: Test
    enabled: False
    inputs:
      command: test
      projects: $(BuildParameters.TestProjects)
      arguments: --configuration $(BuildConfiguration)
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      ConnectedServiceName: 8787bb63-a800-4285-86c2-5ad39aec78f8
      command: publish
      publishWebProjects: True
      projects: $(BuildParameters.RestoreBuildProjects)
      arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
      zipAfterPublish: True
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
      ArtifactName: 'drop'
      publishLocation: 'Container'      
- job: Deploy
  displayName: 'Deploy to IIS Web Server'
  dependsOn: Job_1
  condition: succeeded()
  pool:
    name: 'RAgent'
  steps:
    # Step 1: Download build artifacts
    - task: DownloadBuildArtifacts@0
      displayName: 'Download build artifacts'
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        definition: '1'  # $(Build.DefinitionId)
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(build.artifactstagingdirectory)' #'$(Build.SourcesDirectory)'
   
    # Step 2: Copy Web API files to IIS server folder
    - task: ExtractFiles@1
      displayName: 'Extract published files'
      inputs:
        archiveFilePatterns: '$(build.artifactstagingdirectory)/drop/*.zip'  # Path to the zip file in the 'drop' folder
        destinationFolder: '$(build.artifactstagingdirectory)/extracted'  # Destination folder where files will be extracted
    - task: CopyFiles@2
      displayName: 'Copy Web API files to IIS folder'
      inputs:
        SourceFolder: '$(build.artifactstagingdirectory)/extracted' #'$(buildOutputFolder)/webapi'
        Contents: '**'
        TargetFolder: 'C:\inetpub\wwwroot\Newfolder'  # Change this path to your IIS folder   
  